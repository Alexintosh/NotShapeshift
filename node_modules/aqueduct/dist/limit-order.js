"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _0x_1 = require("0x.js/lib/src/0x");
var bignumber_js_1 = require("bignumber.js");
var aqueduct_1 = require("./generated/aqueduct");
var token_cache_1 = require("./token-cache");
var web3_enabled_service_1 = require("./web3-enabled-service");
var LimitOrder = /** @class */ (function (_super) {
    __extends(LimitOrder, _super);
    function LimitOrder(params) {
        var _this = _super.call(this, params.nodeUrl) || this;
        _this.params = params;
        return _this;
    }
    LimitOrder.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var networkId, tokenPair, baseToken, quoteToken, makerTokenAmount, makerToken, takerTokenAmount, takerToken, fees, err_1, zeroEx, exchangeContractAddress, salt, expirationUnixTimestampSec, signOrderParams, signedOrder, err_2, createdOrder, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        networkId = this.networkId;
                        return [4 /*yield*/, token_cache_1.tokenCache.getTokenPair(this.params.baseTokenSymbol, this.params.quoteTokenSymbol, networkId)];
                    case 1:
                        tokenPair = _a.sent();
                        baseToken = tokenPair.tokenA;
                        quoteToken = tokenPair.tokenB;
                        if (new bignumber_js_1.BigNumber(tokenPair.minimumQuantity).greaterThan(this.params.quantityInWei)) {
                            throw new Error("order quantity must be greater than minimum allowed amount: " + this.params.quantityInWei + "/" + tokenPair.minimumQuantity);
                        }
                        if (this.params.type === 'buy') {
                            makerToken = quoteToken;
                            takerToken = baseToken;
                            takerTokenAmount = this.params.quantityInWei;
                            makerTokenAmount = takerTokenAmount.times(this.params.price);
                        }
                        else {
                            makerToken = baseToken;
                            takerToken = quoteToken;
                            makerTokenAmount = this.params.quantityInWei;
                            takerTokenAmount = makerTokenAmount.times(this.params.price);
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, new aqueduct_1.Aqueduct.Api.FeesService().get({
                                makerTokenAmount: makerTokenAmount.toString(),
                                takerTokenAddress: takerToken.address,
                                makerTokenAddress: makerToken.address,
                                networkId: networkId,
                                takerTokenAmount: takerTokenAmount.toString()
                            })];
                    case 3:
                        fees = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        console.error('failed to get fees...');
                        console.log(err_1);
                        throw err_1;
                    case 5: return [4 /*yield*/, this.validateRequest({
                            fees: fees,
                            networkId: networkId,
                            takerTokenAmount: takerTokenAmount,
                            makerTokenAmount: makerTokenAmount,
                            makerToken: makerToken,
                            takerToken: takerToken,
                            tokenPair: tokenPair
                        })];
                    case 6:
                        _a.sent();
                        zeroEx = this.zeroEx;
                        return [4 /*yield*/, zeroEx.exchange.getContractAddress()];
                    case 7:
                        exchangeContractAddress = _a.sent();
                        salt = _0x_1.ZeroEx.generatePseudoRandomSalt();
                        expirationUnixTimestampSec = !this.params.expirationDate
                            ? 4102444800
                            : this.params.expirationDate.getTime();
                        signOrderParams = {
                            exchangeContractAddress: exchangeContractAddress,
                            expirationUnixTimestampSec: expirationUnixTimestampSec,
                            maker: this.params.account,
                            feeRecipient: fees.feeRecipient,
                            makerFee: new bignumber_js_1.BigNumber(fees.makerFee),
                            makerTokenAddress: makerToken.address,
                            makerTokenAmount: new bignumber_js_1.BigNumber(makerTokenAmount),
                            salt: new bignumber_js_1.BigNumber(salt),
                            taker: '0x0000000000000000000000000000000000000000',
                            takerFee: new bignumber_js_1.BigNumber(fees.takerFee),
                            takerTokenAddress: takerToken.address,
                            takerTokenAmount: new bignumber_js_1.BigNumber(takerTokenAmount)
                        };
                        _a.label = 8;
                    case 8:
                        _a.trys.push([8, 10, , 11]);
                        console.log('signing order...');
                        return [4 /*yield*/, aqueduct_1.Aqueduct.Utils.signOrder({
                                client: zeroEx,
                                getOrderHashHex: _0x_1.ZeroEx.getOrderHashHex
                            }, signOrderParams)];
                    case 9:
                        signedOrder = _a.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        err_2 = _a.sent();
                        console.error('failed to sign order');
                        throw err_2;
                    case 11:
                        _a.trys.push([11, 13, , 14]);
                        return [4 /*yield*/, new aqueduct_1.Aqueduct.Api.StandardService().create({
                                networkId: networkId,
                                request: signedOrder
                            })];
                    case 12:
                        createdOrder = _a.sent();
                        return [2 /*return*/, createdOrder];
                    case 13:
                        err_3 = _a.sent();
                        console.error('problem posting order to API');
                        throw err_3;
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    LimitOrder.prototype.validateRequest = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var networkId, fees, makerToken, makerTokenAmount, takerTokenAmount, zeroEx, zrxToken, zrxBalance, buyingZrx, zrxAllowance, makerBalance, makerAllowance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        networkId = params.networkId, fees = params.fees, makerToken = params.makerToken, makerTokenAmount = params.makerTokenAmount, takerTokenAmount = params.takerTokenAmount;
                        zeroEx = this.zeroEx;
                        return [4 /*yield*/, token_cache_1.tokenCache.getTokenBySymbol('ZRX', networkId)];
                    case 1:
                        zrxToken = _a.sent();
                        return [4 /*yield*/, zeroEx.token.getBalanceAsync(zrxToken.address, this.params.account)];
                    case 2:
                        zrxBalance = _a.sent();
                        buyingZrx = this.params.type === 'buy' && this.params.baseTokenSymbol.toLowerCase() === 'zrx';
                        if (!buyingZrx && zrxBalance.lessThan(fees.makerFee)) {
                            throw new Error("insufficient ZRX balance to pay fees " + zrxBalance.toString() + "/" + fees.makerFee.toString());
                        }
                        else if (buyingZrx && zrxBalance.plus(takerTokenAmount).lessThan(fees.makerFee)) {
                            throw new Error('insufficient ZRX balance and not buying enough ZRX to cover the cost');
                        }
                        return [4 /*yield*/, zeroEx.token.getProxyAllowanceAsync(zrxToken.address, this.params.account)];
                    case 3:
                        zrxAllowance = _a.sent();
                        if (zrxAllowance.lessThan(fees.makerFee)) {
                            throw new Error('insufficient ZRX allowance to pay fees');
                        }
                        return [4 /*yield*/, zeroEx.token.getBalanceAsync(makerToken.address, this.params.account)];
                    case 4:
                        makerBalance = _a.sent();
                        if (makerBalance.lessThan(makerTokenAmount)) {
                            throw new Error('insufficient token balance');
                        }
                        return [4 /*yield*/, zeroEx.token.getProxyAllowanceAsync(makerToken.address, this.params.account)];
                    case 5:
                        makerAllowance = _a.sent();
                        if (makerAllowance.lessThan(makerTokenAmount)) {
                            throw new Error('insufficient allowance');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return LimitOrder;
}(web3_enabled_service_1.Web3EnabledService));
exports.LimitOrder = LimitOrder;
//# sourceMappingURL=limit-order.js.map