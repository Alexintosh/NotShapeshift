"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
var aqueduct_1 = require("./generated/aqueduct");
var token_cache_1 = require("./token-cache");
var web3_enabled_service_1 = require("./web3-enabled-service");
var MarketOrder = /** @class */ (function (_super) {
    __extends(MarketOrder, _super);
    function MarketOrder(params) {
        var _this = _super.call(this, params.nodeUrl) || this;
        _this.params = params;
        return _this;
    }
    MarketOrder.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var tokenPair, makerTokenAddress, takerTokenAddress, marketOrderQuote, err_1, orders, totalBaseAmount, totalTakerAmount, requestedBasedAmount, fillOrders, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, token_cache_1.tokenCache.getTokenPair(this.params.baseTokenSymbol, this.params.quoteTokenSymbol, this.networkId)];
                    case 1:
                        tokenPair = _a.sent();
                        makerTokenAddress = this.params.type === 'buy' ? tokenPair.tokenA.address : tokenPair.tokenB.address;
                        takerTokenAddress = this.params.type === 'buy' ? tokenPair.tokenB.address : tokenPair.tokenA.address;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, new aqueduct_1.Aqueduct.Api.OrdersService().getBest({
                                baseTokenAddress: tokenPair.tokenA.address,
                                networkId: this.networkId,
                                quantity: this.params.quantityInWei.toString(),
                                makerTokenAddress: makerTokenAddress,
                                takerTokenAddress: takerTokenAddress,
                                takerAddress: this.params.account
                            })];
                    case 3:
                        marketOrderQuote = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        console.error('failed to find any matching market orders');
                        throw err_1;
                    case 5:
                        if (!marketOrderQuote.orders.length) {
                            throw new Error('failed to find any matching market orders');
                        }
                        if (new bignumber_js_1.BigNumber(marketOrderQuote.totalQuantity).lessThan(this.params.quantityInWei)) {
                            console.info("can't fill entire requested quantity (" + this.params.quantityInWei.toString() + "). filling available quantity of " + marketOrderQuote.totalQuantity);
                        }
                        orders = marketOrderQuote.orders.map(function (o) { return ({
                            signedOrder: aqueduct_1.Aqueduct.Utils.convertOrderToSignedOrder(o),
                            order: o
                        }); });
                        totalBaseAmount = this.params.quantityInWei;
                        totalTakerAmount = new bignumber_js_1.BigNumber(0);
                        requestedBasedAmount = totalBaseAmount;
                        fillOrders = new Array();
                        orders.forEach(function (o) {
                            var fillableBaseAmount = _this.params.type === 'buy'
                                ? new bignumber_js_1.BigNumber(o.order.remainingTakerTokenAmount)
                                    .times(o.order.makerTokenAmount).dividedBy(o.order.takerTokenAmount)
                                : new bignumber_js_1.BigNumber(o.order.remainingTakerTokenAmount);
                            if (fillableBaseAmount.greaterThan(requestedBasedAmount)) {
                                // this order has enough
                                fillableBaseAmount = new bignumber_js_1.BigNumber(requestedBasedAmount);
                            }
                            requestedBasedAmount = requestedBasedAmount.minus(fillableBaseAmount);
                            var takerAmount = _this.params.type === 'buy'
                                ? new bignumber_js_1.BigNumber(fillableBaseAmount)
                                    .times(o.order.takerTokenAmount).dividedBy(o.order.makerTokenAmount)
                                : fillableBaseAmount;
                            fillOrders.push({
                                id: o.order.id,
                                takerAmount: takerAmount.toString()
                            });
                            totalTakerAmount = totalTakerAmount.add(takerAmount);
                        });
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.zeroEx.exchange.fillOrdersUpToAsync(orders.map(function (o) { return o.signedOrder; }), totalTakerAmount, true, this.params.account)];
                    case 7: return [2 /*return*/, _a.sent()];
                    case 8:
                        err_2 = _a.sent();
                        console.error('failed to fill orders');
                        throw err_2;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return MarketOrder;
}(web3_enabled_service_1.Web3EnabledService));
exports.MarketOrder = MarketOrder;
//# sourceMappingURL=market-order.js.map