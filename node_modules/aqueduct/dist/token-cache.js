"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var aqueduct_1 = require("./generated/aqueduct");
var TokenCache = /** @class */ (function () {
    function TokenCache() {
        this.networkTokenPairMap = {};
    }
    TokenCache.prototype.getTokenPair = function (baseSymbol, quoteSymbol, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenPairs, tokenPair;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSupportedTokenPairs(networkId)];
                    case 1:
                        tokenPairs = _a.sent();
                        tokenPair = tokenPairs.find(function (tp) { return tp.tokenA.symbol.toLowerCase() === baseSymbol.toLowerCase() && tp.tokenB.symbol.toLowerCase() === quoteSymbol.toLowerCase(); });
                        if (!tokenPair) {
                            throw new Error("token pair not found or supported: " + baseSymbol + "/" + quoteSymbol);
                        }
                        return [2 /*return*/, tokenPair];
                }
            });
        });
    };
    TokenCache.prototype.getTokenBySymbol = function (symbol, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            var map, token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTokenMap(networkId)];
                    case 1:
                        map = _a.sent();
                        token = map[symbol];
                        if (!token) {
                            throw new Error("token not found or supported: " + symbol);
                        }
                        return [2 /*return*/, token];
                }
            });
        });
    };
    TokenCache.prototype.getSupportedTokenPairs = function (networkId) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenPairsPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenPairsPromise = this.networkTokenPairMap[networkId];
                        if (!tokenPairsPromise) return [3 /*break*/, 2];
                        return [4 /*yield*/, tokenPairsPromise];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        this.networkTokenPairMap[networkId] = new aqueduct_1.Aqueduct.Api.TokenPairsService().get({ networkId: networkId });
                        return [4 /*yield*/, this.networkTokenPairMap[networkId]];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TokenCache.prototype.getTokenMap = function (networkId) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenPairs, map;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.tokenSymbolMap) {
                            return [2 /*return*/, this.tokenSymbolMap];
                        }
                        return [4 /*yield*/, this.getSupportedTokenPairs(networkId)];
                    case 1:
                        tokenPairs = _a.sent();
                        map = {};
                        tokenPairs.forEach(function (tp) {
                            map[tp.tokenA.symbol] = tp.tokenA;
                            map[tp.tokenB.symbol] = tp.tokenB;
                        });
                        this.tokenSymbolMap = map;
                        return [2 /*return*/, map];
                }
            });
        });
    };
    return TokenCache;
}());
exports.TokenCache = TokenCache;
exports.tokenCache = new TokenCache();
//# sourceMappingURL=token-cache.js.map